function analyze_UMI_coincidence(path_10X, path_probe, outdir)
%analyze_UMI_coincidence compares single-cell count matrices generated by
%CellRanger using FastQs where 10X vs Probe UMIs are incorporated in R1
%
%   analyze_UMI_coincidence(PATH_10X, PATH_PROBE, OUTDIR) uses 
%   filtered_feature_bc_matrix.h5 and molecule_info.h5 files in PATH_10X
%   and PATH_PROBE to perform the comparison and places the results in
%   OUTDIR
%
%   Author: Duluxan Sritharan. Hormoz Lab. Harvard Medical School.

    [~, CBs_10X  , probe_name_10X  ] = load_10x_h5_matrix(sprintf('%s/filtered_feature_bc_matrix.h5', path_10X  ));
    [~, CBs_probe, probe_name_Probe] = load_10x_h5_matrix(sprintf('%s/filtered_feature_bc_matrix.h5', path_probe));
    assert(isequal(probe_name_10X, probe_name_Probe));
    N_genes = length(probe_name_10X);
    clear probe_name_10X probe_name_Probe;
    
    CBs = CBs_10X(ismember(CBs_10X, CBs_probe));
    fprintf('Analysis for %d common cells\n', length(CBs));

    clear CBs_10X CBs_probe

    tenX    = parse_molecule_info(sprintf('%s/molecule_info.h5', path_10X),   CBs, N_genes);
    probe   = parse_molecule_info(sprintf('%s/molecule_info.h5', path_probe), CBs, N_genes);

    joint_ids = union([tenX.barcode_id, tenX.gene_id], [probe.barcode_id, probe.gene_id], 'rows');

    tenX    = populate_common(tenX , joint_ids);
    probe   = populate_common(probe, joint_ids);

    coincidence_by_umis  = accumarray([probe.umi_pop+1 tenX.umi_pop+1], 1);
    coincidence_by_reads = accumarray([probe.umi_pop+1 tenX.umi_pop+1], probe.read_pop+tenX.read_pop);
    
    if (~(exist(outdir, 'dir')==7))
        mkdir(outdir);
    end
    save(sprintf('%s/Coincidence.mat', outdir));

    N_trunc = min(11, min(size(coincidence_by_umis)));

    coincidence_by_umis(coincidence_by_umis==0)=NaN;
    figure('units', 'normalized', 'OuterPosition', [0 0 1 1]);
    b = bar3(coincidence_by_umis(1:N_trunc, 1:N_trunc));
     
    for i = 1:N_trunc
        bcol = get(b(i), 'CData');        
        bcol(repelem(repmat(isnan(coincidence_by_umis(1:N_trunc,i)), 1, 4), 6, 1)) = NaN;                
        set(b(i), 'CData', bcol);
    end    

    view([-60 30]);

    set(gca, 'xticklabels', cellstr(num2str([0:N_trunc-1]')));
    set(gca, 'yticklabels', cellstr(num2str([0:N_trunc-1]')));

    xlabel('10X UMI Count');
    ylabel('Probe UMI Count');
    zlabel('# of (CB,Probe) Entries with UMI Count');

    title('Count Matrix Coincidence Analysis');
    
    print(sprintf('%s/Coincidence.png', outdir), '-dpng', '-r600');  
    close;
    
end

function out = populate_common(out, joint_ids)

    [r, c, v] = find(out.umi_counts);
    [is, where] = ismember([r c], joint_ids, 'row');
    assert(all(is));    
    out.umi_pop = zeros(size(joint_ids,1),1);
    out.umi_pop(where) = v;
    
    [r, c, v] = find(out.read_counts);
    [is, where] = ismember([r c], joint_ids, 'row');
    assert(all(is));    
    out.read_pop = zeros(size(joint_ids,1),1);
    out.read_pop(where) = v./out.umi_pop(where);

end
